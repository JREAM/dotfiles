" must be first
set nocompatible
filetype off

" XDG Paths (Make sure these directories exist!)
set directory=$XDG_CACHE_HOME/vim/swap,~/,/tmp
set backupdir=$XDG_STATE_HOME/vim/backup,~/,/tmp
set undodir=$XDG_STATE_HOME/vim/undo,~/,/tmp
set viminfo+=n$XDG_STATE_HOME/vim/viminfo
set runtimepath+=$XDG_CONFIG_HOME/vim,$XDG_CONFIG_HOME/vim/after,$VIM,$VIMRUNTIME
set packpath=$XDG_CONFIG_HOME/vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after
let $MYVIMRC="$XDG_CONFIG_HOME/vim/vimrc"

" Use Bash shell
set shell=/bin/bash

""""""""""""""""""""""""""""""""""""""""
" Plugins
" $ curl -fLo $XDG_CONFIG_HOME/vim/autoload/plug.vim \
"   --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
""""""""""""""""""""""""""""""""""""""""
call plug#begin("~/.config/vim/plugged")

" Languages
Plug 'evanleck/vim-svelte'
Plug 'othree/html5.vim'
Plug 'evidens/vim-twig'

Plug 'mxw/vim-jsx'
Plug 'StanAngeloff/php.vim'
Plug 'stephpy/vim-yaml'
Plug 'ekalinin/dockerfile.vim'
Plug 'leafgarland/typescript-vim'
Plug 'elzr/vim-json'
Plug 'hail2u/vim-css3-syntax'
Plug 'hdima/python-syntax'
Plug 'isruslan/vim-es6'

Plug 'mustache/vim-mustache-handlebars'
Plug 'pangloss/vim-javascript'
Plug 'plasticboy/vim-markdown'

" theme
Plug 'itchyny/lightline.vim' " Bottom bar
Plug 'benjaminwhite/Benokai'

" Utils
Plug 'chiel92/vim-autoformat'
Plug 'scrooloose/nerdtree'      " Tree Style Dirs
Plug 'vim-scripts/ShowPairs'
Plug 'tpope/vim-fugitive'     " Git

" code
Plug 'gregsexton/matchtag'
Plug 'ap/vim-css-color'
Plug 'kien/rainbow_parentheses.vim'
Plug 'tomtom/tcomment_vim'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'scrooloose/syntastic'

call plug#end()

" Syntastic settings
let g:syntastic_aggregate_errors = 1
let g:syntastic_check_on_open = 0

" Filetype-specific settings (keep these)
au BufRead,BufNewFile /etc/nginx/*,/usr/local/nginx/conf/*,nginx.conf if &ft == '' | setfiletype nginx | endif
autocmd BufRead,BufNewFile *.conf setf dosini
autocmd BufNewFile,BufReadPost *.md set filetype=markdown

" Match Tag Always
let g:rbpt_loadround = 1

" lightline bar
if !has('gui_running')
  set t_Co=256
endif

" requires vim-fugitive plug
let g:lightline = {
      \ 'colorscheme': 'one',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'FugitiveHead'
      \ },
      \ }

set laststatus=2 " Fix status line

" Indent Guides settings (simplified)
let g:indent_guides_enable_on_vim_startup = 1
" let g:indent_guides_auto_colors = 0 " Not needed if using a specific color
" let g:indentLine_color_term = 239  " Or your preferred color

" Rainbow Parentheses settings
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['black',       'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]
let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 1

autocmd VimEnter * RainbowParenthesesToggle
autocmd Syntax * RainbowParenthesesLoadRound
autocmd Syntax * RainbowParenthesesLoadSquare
autocmd Syntax * RainbowParenthesesLoadBraces


""""""""""""""""""""""""""""""""""""""""
" General VIM Settings
""""""""""""""""""""""""""""""""""""""""
autocmd BufWritePre * :%s/\s\+$//e  "Auto strip trailing whitespace
filetype plugin indent on 			" Detect filetype and enable plugins/indentation

set backspace=indent,eol,start " Backspace: Delete indent, end of line, start of line

set mouse=a 		" Enable mouse
set number 			" Show line numbers
set ruler 			" Show ruler
set nowrap 			" No wrap
set autoread 		" Autoread files when they are changed outside of vim
set updatetime=200 	" Check every 200 milliseconds (faster update)


set showmatch 		" Show matching brackets
set mat=2 			" Match brackets after 2 characters
set hidden 			" Hide buffers when they are abandoned

set tabline=2 		" Show tabline
set tabstop=2 		" Number of spaces that a <Tab> in the file counts for
set softtabstop=2 	" Number of spaces that a <Tab> counts for while editing
set shiftwidth=2 	" Number of spaces to use for each step of (auto)indent
set expandtab 		" Use spaces instead of tabs

set noerrorbells 	" No error bells
set novisualbell 	" No visual bell
set t_vb= 			" No terminal bell
set tm=500 			" Timeout for terminal bell

" Filetype-specific tab settings (good)
autocmd Filetype php setlocal tabstop=4
autocmd Filetype go setlocal tabstop=4
autocmd Filetype nginx setlocal tabstop=2

" Wildignore: Ignore these filetypes
set wildignore=*.swp,*.bak,*.pyc,*.class,*.docx,*.jpg,*.png,*.gif,*.pdf,*.pyc,*.exe,*.flv,*.img,*.xlsx,*.webp,*.ico

" Return to last edit position
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif


set viminfo^=%  	" Store viminfo in the viminfo file
set nobackup  		" No backup files generated
set noswapfile  	" No swapfile files generated
set history=1000  " History: 1000 commands
set nofoldenable  " Don't fold code
set wildmode=list:longest

" *** Simplified Clipboard Setting (Choose ONE) ***
" I have a bug here
set clipboard=unnamed  " Standard clipboard integration
" set clipboard=unnamedplus "  X11 clipboard (middle-click paste) - use if on Linux/X11

""""""""""""""""""""""""""""""""""""""""
" Hotkeys
""""""""""""""""""""""""""""""""""""""""

" Map Ctrl+/ to toggle comments
nmap <C-/> :NERDCommentToggle<CR>
vmap <C-/> :NERDCommentToggle<CR>

""""""""""""""""""""""""""""""""""""""""
" Mode Mappings (These are good, keep them)
" ---------------------------------------
" Help: Map hotkeys to commands
" Desc: [i|n|v| ] map: insert|normal|visual|(all) mode mappings
""""""""""""""""""""""""""""""""""""""""
map <C-n> :NERDTreeToggle<CR>
nmap <C-BS> dB
nmap <C-h> <C-w>h
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-l> <C-w>l
nmap <C-S-Left> 0
nmap <C-S-Right> $


""""""""""""""""""""""""""""""""""""""""
" Searching
""""""""""""""""""""""""""""""""""""""""

nnoremap <CR> :nohlsearch<CR> " Normal Mode: No highlight on search
set incsearch 		" Incremental search
set ignorecase		" Ignore case
set smartcase 		" Smart case
set hlsearch 		" Highlight search


""""""""""""""""""""""""""""""""""""""""
" Aesthetics
""""""""""""""""""""""""""""""""""""""""
set scrolloff=3
set cursorline
set highlight=sbr
syntax on
set t_Co=256

" Color schemes should be loaded after plug#end().
" We prepend it with 'silent!' to ignore errors when it's not yet installed.
silent! colorscheme Benokai

" Line number toggling (keep this)
function! ToggleLineNumbers()
  if &number
    set nonumber norelativenumber
    echo "Line numbers OFF"
  else
    set number relativenumber
    echo "Line numbers ON"
  endif
endfunction

nnoremap <F2> :call ToggleLineNumbers()<CR>

