" break with the busted old vi junk
" must be first
set nocompatible
filetype off

" XDG Paths (Make sure these directories exist!)
set directory=$XDG_CACHE_HOME/vim/swap,~/,/tmp
set backupdir=$XDG_STATE_HOME/vim/backup,~/,/tmp
set undodir=$XDG_STATE_HOME/vim/undo,~/,/tmp
set viminfo+=n$XDG_STATE_HOME/vim/viminfo
set runtimepath+=$XDG_CONFIG_HOME/vim,$XDG_CONFIG_HOME/vim/after,$VIM,$VIMRUNTIME
set packpath=$XDG_CONFIG_HOME/vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after
let $MYVIMRC="$XDG_CONFIG_HOME/vim/vimrc"

" Use Bash shell
set shell=/bin/bash

""""""""""""""""""""""""""""""""""""""""
" Plugins (Vundle)
""""""""""""""""""""""""""""""""""""""""

set rtp+=$XDG_CONFIG_HOME/vim/bundle/Vundle.vim
call vundle#rc("$XDG_CONFIG_HOME/vim/bundle")

" Vundle itself
Bundle 'gmarik/Vundle.vim'

" --- Your other plugins ---
Plugin 'benjaminwhite/Benokai'
Plugin 'bling/vim-airline'        " Statusline
Plugin 'vim-airline/vim-airline-themes' " Themes
Plugin 'gregsexton/matchtag'
Plugin 'scrooloose/nerdtree'      " Tree Style Dirs
Plugin 'tomtom/tcomment_vim'
Plugin 'ap/vim-css-color'
Plugin 'junegunn/fzf'
Plugin 'chiel92/vim-autoformat'
Plugin 'eslint/eslint'
Plugin 'evidens/vim-twig'
Plugin 'othree/html5.vim'
Plugin 'ShowPairs'
Plugin 'leafgarland/typescript-vim'
Plugin 'fatih/vim-go'
Plugin 'elzr/vim-json'
Plugin 'hail2u/vim-css3-syntax'
Plugin 'hdima/python-syntax'
Plugin 'isruslan/vim-es6'
Plugin 'kien/rainbow_parentheses.vim'
Plugin 'mustache/vim-mustache-handlebars'
Plugin 'mxw/vim-jsx'
Plugin 'pangloss/vim-javascript'
Plugin 'plasticboy/vim-markdown'
Plugin 'StanAngeloff/php.vim'
Plugin 'stephpy/vim-yaml'
Plugin 'ekalinin/dockerfile.vim'
Bundle "vim-scripts/gitignore"
Plugin 'nathanaelkane/vim-indent-guides'
Bundle "scrooloose/syntastic"

" --- End of your plugins ---

" IMPORTANT:  Initialize Vundle!
call vundle#end()

" Syntastic settings
let g:syntastic_aggregate_errors = 1
let g:syntastic_check_on_open = 0

" Filetype-specific settings (keep these)
au BufRead,BufNewFile /etc/nginx/*,/usr/local/nginx/conf/*,nginx.conf if &ft == '' | setfiletype nginx | endif
autocmd BufRead,BufNewFile *.conf setf dosini
autocmd BufNewFile,BufReadPost *.md set filetype=markdown

" Match Tag Always
let g:rbpt_loadround = 1

" vim-airline settings
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1

" Indent Guides settings (simplified)
let g:indent_guides_enable_on_vim_startup = 1
" let g:indent_guides_auto_colors = 0 " Not needed if using a specific color
let g:indentLine_color_term = 239  " Or your preferred color

" CtrlP custom ignores
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\.git$\|\.hg$\|\.svn$\|bower_components$\|dist$\|node_modules$\|project_files$\|test$',
    \ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$' }

" Rainbow Parentheses settings
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['black',       'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]
let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 1

autocmd VimEnter * RainbowParenthesesToggle
autocmd Syntax * RainbowParenthesesLoadRound
autocmd Syntax * RainbowParenthesesLoadSquare
autocmd Syntax * RainbowParenthesesLoadBraces


""""""""""""""""""""""""""""""""""""""""
" General VIM Settings
""""""""""""""""""""""""""""""""""""""""

" Auto strip trailing whitespace
autocmd BufWritePre * :%s/\s\+$//e

set mouse=a
set backspace=indent,eol,start
set number
set ruler
set nowrap
set autoread
set updatetime=200 " Check every 200 milliseconds (faster update)

" Detect filetype and enable plugins/indentation (keep this enabled)
filetype plugin indent on

set showmatch
set mat=2
set noerrorbells
set novisualbell
set t_vb=
set tm=500
set hidden
set tabline=2
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab

" Filetype-specific tab settings (good)
autocmd Filetype php setlocal tabstop=4
autocmd Filetype nginx setlocal tabstop=2

set wildignore=*.swp,*.bak,*.pyc,*.class,*.docx,*.jpg,*.png,*.gif,*.pdf,*.pyc,*.exe,*.flv,*.img,*.xlsx

" Return to last edit position
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif

set viminfo^=%
set nobackup
set noswapfile
set history=1000
set wildmode=list:longest

" *** Simplified Clipboard Setting (Choose ONE) ***
set clipboard=unnamed  " Standard clipboard integration
" set clipboard=unnamedplus "  X11 clipboard (middle-click paste) - use if on Linux/X11

""""""""""""""""""""""""""""""""""""""""
" Hotkeys
""""""""""""""""""""""""""""""""""""""""

" Map Ctrl+/ to toggle comments (UNCOMMENT if your terminal supports it)
nmap <C-/> :NERDCommentToggle<CR>
vmap <C-/> :NERDCommentToggle<CR>

" Map CTRL P to FZF
nmap <C-P> :FZF<CR>

" Mode Mappings (These are good, keep them)
nnoremap <S-Tab> <<
inoremap <S-Tab> <C-o><<
nmap <C-BS> dB
imap <C-BS> <C-o>dB
nmap <C-S-Right> $
imap <C-S-Right> <C-o>$
nmap <C-S-Left> 0
imap <C-S-Left> <C-o>0
map <C-n> :NERDTreeToggle<CR>
inoremap <C+y> <c-o>:redo</cr>
nmap <C-h> <C-w>h
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-l> <C-w>l

""""""""""""""""""""""""""""""""""""""""
" Searching
""""""""""""""""""""""""""""""""""""""""

set incsearch
nnoremap <CR> :nohlsearch<CR>
set ignorecase
set smartcase
set hlsearch

""""""""""""""""""""""""""""""""""""""""
" Aesthetics
""""""""""""""""""""""""""""""""""""""""

set scrolloff=3
set cursorline
set highlight=sbr
syntax on
set t_Co=256
colorscheme Benokai

" Line number toggling (keep this)
function! ToggleLineNumbers()
  if &number
    set nonumber norelativenumber
    echo "Line numbers OFF"
  else
    set number relativenumber
    echo "Line numbers ON"
  endif
endfunction

nnoremap <F2> :call ToggleLineNumbers()<CR>

