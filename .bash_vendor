#!/bin/bash
# ╔═════════════════════════════════════════════════════════════════╗
# ║ BASH_VENDORS                                                    ║
# ╚═════════════════════════════════════════════════════════════════╝
if (($ + commands[direnv])) >/dev/null 2>&1; then
  eval "$(direnv hook bash)"
fi


# ╔═════════════════════════════════════════════════════════════════╗
# ║ Node/JavaScriptvv                                               ║
# ╚═════════════════════════════════════════════════════════════════╝
NEXT_TELEMETRY_DISABLED=1 # [NextJS]


# ╔═════════════════════════════════════════════════════════════════╗
# ║ JDK / Android SDK                                               ║
# ╚═════════════════════════════════════════════════════════════════╝
if [ -d "/opt/jdk1.8" ]; then
  export JAVA_HOME=/opt/jdk1.8
  export PATH=$PATH:$JAVA_HOME/bin
fi

if [ -d $HOME/Android/Sdk/ ]; then
  # Android Studio: Default Location
  export ANDROID_SDK=$HOME/Android/Sdk
fi

if [ -n "$ANDROID_SDK" ]; then
  export PATH=$PATH:/usr/lib/android-sdk
  export PATH=$PATH:$ANDROID_SDK/emulator
  export PATH=$PATH:$ANDROID_SDK/tools
  export PATH=$PATH:$ANDROID_SDK/tools/bin
  export PATH=$PATH:$ANDROID_SDK/platform-tools
fi


# ╔═════════════════════════════════════════════════════════════════╗
# ║ PHP Composer                                                    ║
# ╚═════════════════════════════════════════════════════════════════╝
export COMPOSER_HOME=$HOME/.composer
if [ -d $COMPOSER_HOME ]; then
  PATH=$PATH:$COMPOSER_HOME
  export COMPOSER_HOME=$(composer config -g home)
fi

if [ -f "$HOME/.composer-autocomplete" ] ; then
    . $HOME/.composer-autocomplete
fi

if [ -d "$HOME/.phpenv/bin" ]; then
  PATH="$HOME/.phpenv/bin:$PATH"
  # Enable Shims and Autocomplete
  export PATH="$HOME/.phpenv/bin:$PATH"
  eval "$(phpenv init -)"
fi


# ╔═════════════════════════════════════════════════════════════════╗
# ║ Docker / Kubernetes                                             ║
# ╚═════════════════════════════════════════════════════════════════╝
if hash docker 2>/dev/null; then
  [[ -f ~/.dockerrc ]] && source ~/.dockerrc
  [[ -f ~/.docker-complete ]] && source ~/.docker-complete
fi

# Kubernetes
if (($ + commands[kubectl])) >/dev/null 2>&1; then
  source <(kubectl completion bash)
fi


# ╔═════════════════════════════════════════════════════════════════╗
# ║  Node / NPM / Yarn                                              ║
# ║  (!) Place ~/.yarn before ~/.npm so is takes precidence.        ║
# ╚═════════════════════════════════════════════════════════════════╝
# Yarn (NPM alternative)
[[ -d $HOME/.yarn/bin ]] && export PATH=$PATH:$HOME/.yarn/bin
# Completions
[[ -f ~/.npm-completion ]] && source ~/.npm-completion
[[ -f ~/.yarn-completion ]] && source ~/.yarn-completion


# ╔═════════════════════════════════════════════════════════════════╗
# ║  GoLang                                                         ║
# ╚═════════════════════════════════════════════════════════════════╝
if [ -d /usr/local/go ]; then
  # Go Development in $GOPATH
  export GOPATH=$HOME/go
  export PATH=$PATH:/usr/local/go/bin
  export PATH=$PATH:$GOPATH/bin
fi


# ╔═════════════════════════════════════════════════════════════════╗
# ║ Bash Helpers                                                    ║
# ╚═════════════════════════════════════════════════════════════════╝
if [ -f $HOME/.local/bin/fuck ]; then
  eval $(thefuck --alias)
fi

if [ -f /usr/share/doc/fzf/examples/key-bindings.bash ]; then
  source /usr/share/doc/fzf/examples/key-bindings.bash ;
fi

if command -v batcat &> /dev/null; then
  alias cat='batcat --paging=never'
fi

# ╔═════════════════════════════════════════════════════════════════╗
# ║  Python / PyEnv                                                 ║
# ╚═════════════════════════════════════════════════════════════════╝
# Stop Python from generating bytecode files
export PYTHONDONTWRITEBYTECODE=1

# Check for PyEnv Version Manager
if [ -d $HOME/.pyenv ]; then
  export PYENV_ROOT=$HOME/.pyenv
  export PATH=$PATH:$PYENV_ROOT/bin:$PATH
  eval "$(pyenv init --path)"

  # @install https://github.com/pyenv/pyenv#installation
  export PYENV_ROOT=$HOME/.pyenv
  export PATH=$PATH:$PYENV_ROOT/bin:$PATH
  eval "$(pyenv init --path)"
fi

# Check for PyEnv Virtualenvwrapper
if (($ + commands[pyenv])) >/dev/null 2>&1; then
  eval "$(pyenv init -)"
  alias mkvirtualenv="mkvirtualenv --no-site-packages --distribute"

  if [ -d ~/.pyenv/plugins/pyenv-virtualenvwrapper ]; then
    # Allow PyEnv Virtualenvwrapper to create venvs
    # Auto activate virtualenvs on directory change
    eval "$(~/.pyenv/bin/pyenv virtualenv-init -)"
    export PYENV_VIRTUALENVWRAPPER_PREFER_PYVENV="true"
  fi
fi


# ╔═════════════════════════════════════════════════════════════════╗
# ║  NVM (Node Version Manager)                                     ║
# ╚═════════════════════════════════════════════════════════════════╝
if [ -d $HOME/.nvm ]; then
  export NVM_DIR=$HOME/.nvm

  # Load NVM (Node Version Manager) and NVM Bash Completion
  [ -s $NVM_DIR/nvm.sh ] && source $NVM_DIR/nvm.sh
  [ -s $NVM_DIR/bash_completion ] && source $NVM_DIR/bash_completion

  # Check for an .nvmrc file if a specific version is in a folder.
  load-nvmrc() {
    if [ -f $HOME/.nvmrc -a -r $HOME/.nvmrc ]; then
      nvm use
    elif [ $(nvm version) != $(nvm version default) ]; then
      echo "Reverting to nvm default version"
      nvm use default
    fi
  }

  cd() {
    builtin cd "$@"
    'load-nvmrc'
  }
fi


# ╔═════════════════════════════════════════════════════════════════╗
# ║  GRC (Bash Color Highlights)                                    ║
# ╚═════════════════════════════════════════════════════════════════╝
export GRC_ALIASES=true
if [ -f "/etc/profile.d/grc.sh" ]; then
  source /etc/profile.d/grc.sh
fi


# ╔═════════════════════════════════════════════════════════════════╗
# ║ Bash Helpers                                                    ║
# ╚═════════════════════════════════════════════════════════════════╝
if [ -f $HOME/.local/bin/fuck ]; then
  eval $(thefuck --alias)
fi


# ╔═════════════════════════════════════════════════════════════════╗
# ║  Wine Compat Mode (XP) and Resize Fonts                         ║
# ╚═════════════════════════════════════════════════════════════════╝
if [ -f /usr/bin/wine ]; then
  export WINEARCH=win32       # Use 32-bit to fix black boxes on some apps
  export WINEPREFIX=~/.wine32 # This can be emplty
  # $ winecfg -- Run this after (see title few lines up)
fi
