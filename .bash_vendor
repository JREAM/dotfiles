#!/bin/bash
# shellcheck disable=SC1090,SC2086,SC1091
# ╔═════════════════════════════════════════════════════════════════╗
# ║ BASH_VENDORS                                                    ║
# ╚═════════════════════════════════════════════════════════════════╝

# ╔═════════════════════════════════════════════════════════════════╗
# ║ Java JDK                                                        ║
# ╚═════════════════════════════════════════════════════════════════╝
# [Pkg]       default-jdk default-jre
# [Locate]    $ readlink -f `which javac` | sed "s:/bin/javac::"
# [Notes]     Java is always a symbolic link using update-alternatives
if [ -L /usr/bin/java ]; then
    export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64/bin/java
    export PATH=$PATH:$JAVA_HOME/bin
fi

# ╔═════════════════════════════════════════════════════════════════╗
# ║ Dotnet JDK                                                      ║
# ╚═════════════════════════════════════════════════════════════════╝
# [Pkg]       dotnet-install.sh
# [Locate]    $ readlink -f `which javac` | sed "s:/bin/javac::"
# [Notes]     wget https://dot.net/v1/dotnet-install.sh -O dotnet-install.sh
#             chmod +x ./dotnet-install.sh && ./dotnet-install.sh
#             (See ~/.dotnet folder)
if [ -d $HOME/.dotnet ]; then
    export DOTNET_ROOT=$HOME/.dotnet
    export PATH=$PATH:$DOTNET_ROOT/tools
    alias dotnet=$DOTNET_ROOT/dotnet
fi

# ╔═════════════════════════════════════════════════════════════════╗
# ║  Rust Language                                                  ║
# ╚═════════════════════════════════════════════════════════════════╝
# [Pkg]     Rust
# [Install] $ curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
[[ -d $XDG_DATA_HOME/cargo/bin ]] && export PATH=$PATH:$XDG_DATA_HOME/cargo/bin

# ╔═════════════════════════════════════════════════════════════════╗
# ║  Bun (Node)                                                     ║
# ╚═════════════════════════════════════════════════════════════════╝
# [Pkg]     Bun (Node alternative)
# [Install] curl -fsSL https://deno.land/install.sh | sh
# ───────────────────────────────────────────────────────────────────
if command -v bun >/dev/null 2>&1; then
    export BUN_INSTALL="$HOME/.bun"
    export PATH="$BUN_INSTALL/bin:$PATH"
fi

# ╔═════════════════════════════════════════════════════════════════╗
# ║  Deno (Node)                                                     ║
# ╚═════════════════════════════════════════════════════════════════╝
# [Pkg]     Deno (Node alternative)
# [Install] curl -fsSL https://deno.land/install.sh | sh
# ───────────────────────────────────────────────────────────────────
[[ -f "$HOME/.deno/env" ]] && . "$HOME/.deno/env"

# ╔═════════════════════════════════════════════════════════════════╗
# ║  asdf (Version Mgr)                                             ║
# ╚═════════════════════════════════════════════════════════════════╝
# [Pkg]     asdf (Node alternative)
# [Install] git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.14.1
# ───────────────────────────────────────────────────────────────────
# Disalbe for now
#if [[ -f "$HOME/.asdf/asdf.sh" ]]; then
# . "$HOME/.asdf/asdf.sh"
#  . "$HOME/.asdf/completions/asdf.bash"
#fi

# ╔═════════════════════════════════════════════════════════════════╗
# ║  Node / NPM / Yarn / PNPM                                       ║
# ║  (!) Place ~/.yarn before ~/.npm so is takes precidence.        ║
# ╚═════════════════════════════════════════════════════════════════╝
# [Pkg]     Yarn (NPM alternative)
# [Install] $ npm i -g yarn
# ───────────────────────────────────────────────────────────────────
if [[ -d $HOME/.yarn/bin ]]; then
    export PATH=$PATH:$HOME/.yarn/bin
    alias yarn='yarn --use-yarnrc "$XDG_CONFIG_HOME/yarn/config"'
fi

# pnpm (Phantom NPM) (NPM Alternative)
# ───────────────────────────────────────────────────────────────────
# [Pkg]       https:/pnpm.io
# [Install]   curl -fsSL https://get.pnpm.io/install.sh | sh -
# [Use]       $ pnpm -h
if [ -d $HOME/.local/share/pnpm ]; then
    export PNPM_HOME="$HOME/.local/share/pnpm"
    export PATH="$PNPM_HOME:$PATH"
    alias pn=pnpm
fi

# ╔═════════════════════════════════════════════════════════════════╗
# ║  Laravel Sail                                                   ║
# ╚═════════════════════════════════════════════════════════════════╝
# [Pkg]       https://laravel.com/docs/11.x/sail
# [Req]       Docker
# [Install]   curl -s "https://laravel.build/NameYourApp" | bash
#             sail up && sail migrate
# [Use]       $ sail
alias sail='sh $([ -f sail ] && echo sail || echo vendor/bin/sail)'

# ╔═════════════════════════════════════════════════════════════════╗
# ║  GoLang                                                         ║
# ╚═════════════════════════════════════════════════════════════════╝
# [Pkg]       https://go.dev/
# [Install]   Download @ https://go.dev/dl/
# [Use]       $ go -h
if [ -d /usr/local/go ]; then
    # Do GO development in $GOPATH
    export GOPATH=$XDG_DATA_HOME/go
    export PATH=$PATH:/usr/local/go/bin
    export PATH=$PATH:$GOPATH/bin
fi

# ╔═════════════════════════════════════════════════════════════════╗
# ║  Python / PyEnv                                                 ║
# ╚═════════════════════════════════════════════════════════════════╝
# Stop generating bytecode files
export PYTHONDONTWRITEBYTECODE=1
export WORKON_HOME="$XDG_DATA_HOME/virtualenvs"

# Pipx is for installing python commands (not packages)
# ───────────────────────────────────────────────────────────────────
# [Pkg]   pip install pipx
if [ -x $HOME/.local/bin/pipx ]; then
    eval "$(register-python-argcomplete pipx)"
fi

# ╔═════════════════════════════════════════════════════════════════╗
# ║  Composer / PHP                                                 ║
# ╚═════════════════════════════════════════════════════════════════╝
[ -d $XDG_CONFIG_HOME/composer/vendor/bin ] && PATH=$PATH:$XDG_CONFIG_HOME/composer/vendor/bin

# ╔═════════════════════════════════════════════════════════════════╗
# ║ Bash Helpers                                                    ║
# ╚═════════════════════════════════════════════════════════════════╝

# ───────────────────────────────────────────────────────────────────
#  GRC (Bash Color Highlights)
# ───────────────────────────────────────────────────────────────────
# [Pkg]     apt install grc
# [Toggle]  sudo sed -i 's/^GRC_ALIASES.*/GRC_ALIASES=true/' /etc/default/grc
export GRC_ALIASES=true
[[ -s "/etc/profile.d/grc.sh" ]] && source /etc/profile.d/grc.sh

# ───────────────────────────────────────────────────────────────────
# Better concat (cat) function  with colors
# ───────────────────────────────────────────────────────────────────
# [Pkg]   https://github.com/sharkdp/bat
# [Use]   $ batcat -h
if type batcat >/dev/null 2>&1; then
    # --plain for no line numbers
    # --paging never (because I can't copy/paste so nicely)
    alias bat='batcat --theme="Monokai Extended Origin" --plain --paging=never'
fi

# ───────────────────────────────────────────────────────────────────
# FZF Fuzzy Finder (Very Powerful Tool)
# ───────────────────────────────────────────────────────────────────
# [Pkg]   https://github.com/junegunn/fzf
#         git clone instead of apt for working version

# [Use]   $ fzf
#         $ cat anyfile | fzf
#         <ALT> + C   Fuzzy Directory Jump
#         <CTRL> + R  History Fuzzy Search
# Set Alias for fd before FZF
[ -x /usr/bin/fdfind ] && alias fd='fdfind'

[ -d "$HOME/.fzf/bin" ] && export PATH=$PATH:$HOME/.fzf/bin

if [ -x $HOME/.fzf/bin/fzf ]; then
    export FZF_DEFAULT_OPTS="--height 40% --layout=reverse --preview 'cat {}' --info=inline --margin=0 --padding=0 --border=rounded --tabstop=4 --color=dark,info:bright-green,pointer:green,hl:bright-green"
    export FZF_DEFAULT_COMMAND="fdfind . $HOME"
    export FZF_ALT_C_COMMAND="fdfind -t d . $HOME"
    #fzf --preview 'bat --style=numbers --color=always --line-range :500 {}'

    _fzf_comprun() {
        local command=$1
        shift
        case "$command" in
        cd) fzf "$@" --preview 'tree -C {} | head -200' ;;
        *) fzf "$@" ;;
        esac
    }
fi

# ───────────────────────────────────────────────────────────────────
# DirEnv
# [Pkg]   apt install direnv
# [Use]   Create a .envrc file
#         $ direnv allow
# ───────────────────────────────────────────────────────────────────

[ -x /usr/bin/direnv ] && eval "$(direnv hook bash)"
