#!/bin/bash
# ___________________________________________________________________
#
#                  Dockerrc [Sourced from .bashrc]
#                         Docker Shortcuts
#
# Note: Using rm<i|c|v> (i:images, c:containers, v:volumes>
#
# < Built-in 1.13+ >
# 1: Remove all stopped containers:
#   $ docker container prune
#   $ docker container prune --filter "until=1w"
# 2: System Prune:
#   $ docker system prune -a
# ___________________________________________________________________


# ___________________________________________________________________
#
# Used for Settings, please do not change.
# ___________________________________________________________________
DIR_DB='/data/db'
DIR_CONF='/data/conf'

# ___________________________________________________________________
#
#                           SETTINGS
#
#       These only install if you run them with functions below.
#  @note Different ports are use for non-conflict with local setups.
# ___________________________________________________________________
#

# @TODO: Add destroyable so its easier for user, multi instance maybe?

MY_PORTAINER_PORT=9500
MY_PORTAINER_NAME="portainer-local"

MY_SWAGGER_PORT=9600
MY_SWAGGER_NAME="swagger-local"

MY_REDIS_NAME="redis-local"
MY_REDIS_PORT=6300  # 6379 is default

MY_MONGO_NAME="mongo-local"
MY_MONGO_PORT=2700  # 27017 is default

MY_MYSQL_NAME="mysql-local"
MY_MYSQL_PORT=3300  # 3306 is default
MY_MYSQL_ROOT_PASSWORD="root"  # root Password

# ___________________________________________________________________
#
#                           ALIASES
#
#                       Docker Compose
# ___________________________________________________________________
alias pose="docker-compose"
alias pose-l="docker-compose logs"
alias pose-log="docker-compose logs"
alias pose-logs="docker-compose logs"
alias pose-lf="docker-compose logs -f"
alias post-logf="docker-compose logs -f"
alias pose-logsf="docker-compose logs -f"
alias pose-reboot="docker-compose down && docker-compose up -d"
alias pose-fresh="docker-compose kill && docker-compose down && docker-compose up --build -d"
alias pose-down="docker-compose down"
alias pose-up="docker-compose up -d"
alias pose-stop="docker-compose stop"
alias pose-kill="docker-compose kill"

# ___________________________________________________________________
#
#                       ALIASES/FUNCTIONS
#                             Docker
# ___________________________________________________________________
alias docker-kill-all="docker kill $(docker ps -q)"

# Shortcut for docker compose without the dash
function docker() {
    echo $1
  if [ "$1" = "compose" ]
  then
    shift
    docker-compose "$@"
  else
    command docker "$@"
  fi
}

# UTIL: Get last ID
function docker-last-id() {
    docker ps -l -q
}

# IMAGES: Does Container Exist?
function docker-exists() {
    if [ -z $1 ]; then
        echo "Missing argument for image name."
        return
    fi
    return $(docker images -q $1)  # Returns ID or Nothing
}

# IMAGES: Remove Danglish
function docker-rmi-dangling() {
    docker images -a -q --filter 'dangling=true' | xargs docker rmi
}

# IMAGES: Remove ALL
function docker-rmi-all() {
    docker rmi $(docker images -a -q)
}

# VOLUMES: Remove Dangling
function docker-rmv-dangling() {
    docker volume rm $(docker volume ls -q -f dangling=true)
}

# CONTAINERS: Stop/Kill All
function docker-stop-all {
    docker stop $(docker ps -q)
}

function docker-kill-all {
    docker kill $(docker ps -q)
}

# CONTAINERSL Remove ALL
function docker-rmc-all() {
    docker kill $(docker ps -q)
    docker ps -aq | xargs docker rm -fv
}

# CONTAINERS: Remove OLD (Weeks Ago)
function docker-rm-containers-old() {
    docker ps -a | grep 'weeks ago' | awk '{print $1}' | xargs docker rm
}

# ___________________________________________________________________
#
#                           PORTAINER
# ___________________________________________________________________
function portainer-setup() {
    docker volume create portainer_data
    docker run -d --name=$MY_PORTAINER_NAME -p $MY_PORTAINER_PORT:9000 -v /var/run/docker.sock:/var/run/docker.sock -v /data/db/portainer_data:/data portainer/portainer
}

function portainer-up() {
    docker start $MY_PORTAINER_NAME
}

function portainer-stop() {
    docker stop $MY_PORTAINER_NAME
}

# ___________________________________________________________________
#
#                           SWAGGER EDITOR
#
#                  @recommended: $ npm i -g swagger
#                             (Optional)
# ___________________________________________________________________
function swagger-setup() {
    docker run -d --name=$MY_SWAGGER_NAME -p $MY_SWAGGER_PORT:8080 swaggerapi/swagger-editor
    echo -e "@recommended: npm i -g swagger  (Additional CLI for Swagger)\n"
}

function swagger-up() {
    docker start $MY_SWAGGER_NAME
}

function swagger-stop() {
    docker stop $MY_SWAGGER_NAME
}

# ___________________________________________________________________
#
#                               REDIS
#
# ___________________________________________________________________
function redis-setup() {
    sudo mkdir -p /data
    if [ ! -f $DIR_CONF/redis.conf ]; then
        echo "You need are missing ${DIR_CONF}/redis.conf, see https://github.com/jream/dotfiles.git under a docker folder"
        exit 1
    fi
    docker run -d -v $DIR_CONF/redis.conf:/usr/local/etc/redis/redis.conf --name=$MY_REDIS_NAME -p $MY_REDIS_PORT:6379 redis:3-alpine
}

function redis-up() {
    docker start $MY_REDIS_NAME
}

function redis-stop() {
    docker stop $MY_REDIS_NAME
}

# ___________________________________________________________________
#
#                               MONGO
#
# ___________________________________________________________________
function mongo-setup() {
    echo "Creating local directory to persist data"
    sudo mkdir $DIR_DB/mongo/$MY_MONGO_NAME
    docker run -d -v $DIR_DB/mongo/$MY_MONGO_NAME --name=$MY_MONGO_NAME -p $MY_MONGO_PORT:27017 mongo:3.4
}

function mongo-up() {
    docker start $MY_MONGO_NAME
}

function mongo-stop() {
    docker stop $MY_MONGO_NAME
}

# ___________________________________________________________________
#
#                               MYSQL
#
# ___________________________________________________________________
function mysql-setup() {
    echo "Creating local directory to persist data"
    sudo mkdir $DIR_DB/mysql/$MY_MYSQL_NAME
    docker run -d -v $DIR_DB/mysql/$MY_MYSQL_NAME:/var/lib/mysql --name=$MY_MYSQL_NAME -p $MY_MYSQL_PORT:3306 -e MYSQL_ROOT_PASSWORD=$MY_MYSQL_ROOT_PASSWORD mysql:5.7
}

#function mysql-connect() {
#    docker run -it --link  $MY_MYSQL_NAME:mysql --rm mysql sh -c 'exec mysql -h"$MY_MYSQL_ADDR" -P"$MY_MYSQL_PORT" -uroot -p"$MY_MYSQL_PASSWORD"
#}

function mysql-up() {
    docker start $MY_MYSQL_NAME
}

function mysql-stop() {
    docker stop $MY_MYSQL_NAME
}

# End of File
