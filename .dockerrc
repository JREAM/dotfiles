#!/bin/bash
# ___________________________________________________________________
#
#                  Dockerrc [Sourced from .bashrc]
#                         Docker Shortcuts
#
# Note: Using rm<i|c|v> (i:images, c:containers, v:volumes>
#
# < Built-in 1.13+ >
# 1: Remove all stopped containers:
#   $ docker container prune
#   $ docker container prune --filter "until=1w"
# 2: System Prune:
#   $ docker system prune -a
# ___________________________________________________________________

# ___________________________________________________________________
#
#                           SETTINGS
# ___________________________________________________________________
#
MY_PORTAINER_PORT=9500
MY_PORTAINER_NAME="portainer"
MY_SWAGGER_PORT=9600
MY_SWAGGER_NAME="swagger"

# ___________________________________________________________________
#
#                           ALIASES
# ___________________________________________________________________
alias dco="docker-compose"
alias dco-l="docker-compose logs"
alias dco-lf="docker-compose logs -f"
alias dco-reboot="docker-compose down && docker-compose up"
alias dco-fresh="docker-compose kill && docker-compose down && docker-compose up --build -d"
alias dco-down="docker-compose down"
alias dco-up="docker-compose up -d"
alias dco-stop="docker-compose stop"
alias dco-kill="docker-compose kill"

alias docker-kill-all="docker kill $(docker ps -q)"

# ___________________________________________________________________
#
#                           FUNCTIONS
# ___________________________________________________________________

# UTIL: Get last ID
function docker-last-id() {
    docker ps -l -q
}

# IMAGES: Does Container Exist?
function docker-exists-i() {
    if [ -z $1 ]; then
        echo "Missing argument for image name."
        return
    fi
    return $(docker images -q $1)  # Returns ID or Nothing
}

# IMAGES: Remove Danglish
function docker-rmi-dangling() {
    docker images -q --filter 'dangling=true' | xargs docker rmi
}

# IMAGES: Remove ALL
function docker-rmi-all() {
    docker rmi $(docker images -q)
}

# VOLUMES: Remove Dangling
function docker-rmv-dangling() {
    docker volume rm $(docker volume ls -q -f dangling=true)
}

# CONTAINERS: Stop/Kill All
function docker-stop-all {
    docker stop $(docker ps -q)
}
function docker-kill-all {
    docker kill $(docker ps -q)
}

# CONTAINERSL Remove ALL
function docker-rmc-all() {
    docker kill $(docker ps -q)
    docker ps -aq | xargs docker rm -fv
}

# CONTAINERS: Remove OLD (Weeks Ago)
function docker-rm-containers-old() {
    docker ps -a | grep 'weeks ago' | awk '{print $1}' | xargs docker rm
}

# ___________________________________________________________________
#
#                           PORTAINER
# ___________________________________________________________________
function portainer-setup() {
    docker volume create portainer_data
    docker run -d --name=$MY_PORTAINER_NAME -p $MY_PORTAINER_PORT:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer
}

function portainer-up() {
    docker start $MY_PORTAINER_NAME
}

function portainer-stop() {
    docker stop $MY_PORTAINER_NAME
}

# ___________________________________________________________________
#
#                           SWAGGER EDITOR
#
#                  @recommended: $ npm i -g swagger
#                             (Optional)
# ___________________________________________________________________
function swagger-setup() {
    docker run -d --name=$MY_SWAGGER_NAME -p $MY_SWAGGER_PORT:8080 swaggerapi/swagger-editor
    echo -e "@recommended: npm i -g swagger  (Additional CLI for Swagger)\n"
}

function swagger-up() {
    docker start $MY_SWAGGER_NAME
}

function swagger-stop() {
    docker stop $MY_SWAGGER_NAME
}
# End of File
