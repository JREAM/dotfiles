#!/bin/bash
# shellcheck disable=SC2086,SC2032,SC2033,SC2142
# ╔═════════════════════════════════════════════════════════════════╗
# ║ BASH_ALIASES                                                    ║
# ╚═════════════════════════════════════════════════════════════════╝
#  (!) .bash_alias is sourced from .bashrc

# ┌─────────────────────────────────────────────────────────────────┐
# │ Personal Shortcuts                                              │
# └─────────────────────────────────────────────────────────────────┘
[ -d $HOME/Downloads ] && alias dl='cd $HOME/Downloads'

# ┌─────────────────────────────────────────────────────────────────┐
# │ Apply colors as much as possible                                │
# └─────────────────────────────────────────────────────────────────┘
COLORIZE=""
[ -f /usr/bin/grc ] &>/dev/null && COLORIZE='grc'
export GREP_COLOR='1;32'

# ┌─────────────────────────────────────────────────────────────────┐
# │ Apt Package Manager                                             │
# └─────────────────────────────────────────────────────────────────┘
alias apt='sudo apt'
alias autoclean='apt autoclean'
alias autoremove='apt autoremove'
alias clean='autoremove && autoclean'
alias ppa='sudo apt-add-repository'
alias update='sudo apt update'
alias updatey='update && apt upgrade -y && clean'
alias upgrade='sudo apt upgrade'

# ┌─────────────────────────────────────────────────────────────────┐
# │ Common                                                          │
# └─────────────────────────────────────────────────────────────────┘
alias sudo='sudo '   # (1) Place above other sudo commands to enable aliases to be sudo-ed.
alias root='sudo -i' # Become root
alias su='sudo -i'   # Become root

alias www='cd /wwww'

# Work
[ -d /server/work ] && alias w='cd /server/work'

# Docker
[ -d /docker ] && alias d='cd /docker'

# Projects
if [ -d /server/projects ]; then
  alias p='cd /server/projects'
elif [ -d ~/projects ]; then
  alias p='cd ~/projects'
fi

alias h='history'
alias c='clear'
alias j='jobs -l'
alias left='ls -t -1' # See where I last left off

alias nv=nvim         # neovim
alias vi=vim          # vim
alias vims='sudo vim' # sudo mode vim

alias reload='source $HOME/.bashrc'
alias permissions-octal='stat -c \"%a %n\" -- $1'

# Copy contents to /etc/network/if-up.d/sshfs-mount

alias sshreload='eval `ssh-agent` && ssh-add ~/.ssh/id_rsa'
alias mountserver='sudo sshfs jesse@10.10.10.200:/server /server -o ControlMaster=yes,reconnect,allow_other,workaround=rename,idmap=user,uid=1000,gid=1000,IdentityFile=/home/jesse/.ssh/server-local,Cipher=arcfour,compression=no'
alias umountserver='sudo umount -lf /server'

# ┌─────────────────────────────────────────────────────────────────┐
# │ Navigation                                                      │
# └─────────────────────────────────────────────────────────────────┘
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .3='cd ../../../'
alias .4='cd ../../../../'

alias l="ls --color=auto"
alias la="ls -lah --color=auto" # Horizontal List
alias ll="ls -lah --color=auto" # Long/Vertical List
alias ls="ls --color=auto "
alias l.="ls -d .* --color=auto | column -s='\n'" # List Hidden files
alias lh="l. --color=auto"                        # <List Hidden Files>; Alias for Alias
alias ll.="ls -lhd .* --color=auto"               # Long List Hiddent
alias llh="ll. --color=auto"                      # <List Hiddent Files; Alias for Alias

# ┌─────────────────────────────────────────────────────────────────┐
# │ Copy / Get / Remove                                             │
# └─────────────────────────────────────────────────────────────────┘
alias cpv='rsync -ah --info=progress2'                         # Progress bar'
alias findfile="find . -name "                                 # Make find a little easier
alias mkdir='mkdir -pv'                                        # $ mkdir x/y/z
alias rm='rm -I --preserve-root'                               # Prompt if deleting more than 3 files at a time
alias wget="wget -c - --hsts-file='$XDG_CACHE_HOME/wget-hsts'" # Resume if failed by default
alias xclip='xclip -sel clip'                                  # Copy to Clipboard $ cat file.txt | xclip
alias tmux="tmux -f $XDG_CONFIG_HOME/tmux/tmux.conf"

# ┌─────────────────────────────────────────────────────────────────┐
# │ Grep                                                            │
# └─────────────────────────────────────────────────────────────────┘
alias grep='grep --color=auto'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'

# ┌─────────────────────────────────────────────────────────────────┐
# │ Permissions / Ownership                                         │
# └─────────────────────────────────────────────────────────────────┘
alias chgrp='sudo chgrp --preserve-root'
alias chmod='sudo chmod --preserve-root'
alias chmox='sudo chmod --preserve-root' # I always make this typo
alias chown='sudo chown --preserve-root'

# ┌─────────────────────────────────────────────────────────────────┐
# │ Services                                                        │
# └─────────────────────────────────────────────────────────────────┘
alias service='sudo service'
alias systemctl='sudo systemctl'

alias poweroff='sudo /sbin/poweroff'
alias reboot='sudo /sbin/reboot'
alias shutdown='sudo /sbin/shutdown'
alias gtkversion='gtk-launch --version'

# ┌─────────────────────────────────────────────────────────────────┐
# │ Ping / IP / Network                                             │
# └─────────────────────────────────────────────────────────────────┘
alias fastping='ping -c 100 -s.2'
alias myip="curl -s https://checkip.amazonaws.com"
alias myips="hostname -I"
alias iplist='sudo $COLORIZE /sbin/iptables -L -n -v --line-numbers'
alias iptlistfw='sudo $COLORIZE /sbin/iptables -L FORWARD -n -v --line-numbers'
alias iptlistin='sudo $COLORIZE /sbin/iptables -L INPUT -n -v --line-numbers'
alias iptlistout='sudo $COLORIZE /sbin/iptables -L OUTPUT -n -v --line-numbers'
alias ping='ping -c 5' # Send X packets
alias ports="netstat -tulanp"

alias filesystem-reload='sudo systemctl start remote-fs.target local-fs.target && sudo systemctl daemon-reload' # FStab, mount -a doesn't work
alias fsreload="filesystem-reload"
alias fontreload='fc-cache -f'

function convertgpgkey() {
  if [ -z $1 ]; then
    echo -e "[!] You must pass a file, such as filename.asc"
    return 0
  fi
  if [ ! -f $1 ]; then
    echo -e "[!] The first argument must be a file."
  fi

  echo -e "[+] Example downloading to file:"
  echo -e "wget -qO - https://www.mongodb.org/static/pgp/server-6.0.asc > server-6.0.asc"
  echo -e "cat server-6.0.asc | gpg --dearmor | sudo tee /usr/share/keyrings/mongodb-org-6.0.gpg | > /dev/null 2&1"
  cat $1 | grg --dearmor >"${1%.*}.gpg" # New File Name
}

# ┌─────────────────────────────────────────────────────────────────┐
# │ HDD Related                                                     │
# └─────────────────────────────────────────────────────────────────┘
alias df='df -H | grep -v "/snap"' # Excloude /snap directories
alias du='du -ch'                  # Disk Usage
alias mount='mount | column -t'
alias most='du -hsx * | sort -rh | head -10'
alias usage='du -ch | grep total'
alias totalusage='df -hl --total | grep total'

# ┌─────────────────────────────────────────────────────────────────┐
# │ CPU / Memory Related                                            │
# └─────────────────────────────────────────────────────────────────┘
alias pscpu="ps auxf | sort -nr -k 3"
alias pscpu10="ps auxf | sort -nr -k 3 | head -10"
alias psmem="ps auxf | sort -nr -k 4"
alias psmem10="ps auxf | sort -nr -k 4 | head -10"

# ┌─────────────────────────────────────────────────────────────────┐
# │ SSH                                                             │
# └─────────────────────────────────────────────────────────────────┘
alias ssh-fingerprint='ssh-keygen -lf $1'
alias ssh-permissions='chown -R $USER:$USER ~/.ssh && \
  chmod 700 ~/.ssh && \
  chmod 600 ~/.ssh/* && \
  chmod 644 ~/.ssh/{*.pub,config,known_hosts}'

# ┌─────────────────────────────────────────────────────────────────┐
# │ Hardware Info                                                   │
# └─────────────────────────────────────────────────────────────────┘
hardware() {
  sudo dmidecode -t "$1"
}

alias hardware-bios='hardware bios'
alias hardware-cache='hardware cache'
alias hardware-chassis='hardware chassis'
alias hardware-connector='hardware connector'
alias hardware-cpu='hardware processor'
alias hardware-memory='hardware memory'
alias hardware-motherboard='hardware baseboard'
alias hardware-slot='hardware slot'
alias hardware-system='hardware system'

# ┌─────────────────────────────────────────────────────────────────┐
# │ Utility Packages                                                │
# └─────────────────────────────────────────────────────────────────┘
# Allows you to pass --owner value --group dev
# Extends ls

myls() {
  local flag_owner=''
  local flag_group=''

  # Parse command line arguments
  while [[ $# -gt 0 ]]; do
    key="$1"

    case $key in
    --user | -u)
      flag_owner="--user $2"
      shift
      shift
      ;;
    --group | -g)
      flag_group="--group $2"
      shift
      shift
      ;;
    *)
      # Ignore unknown flags/options
      shift
      ;;
    esac
  done

  # Execute the ls command with the specified flags
  ls $flag_owner $flag_group "$@"
}
alias ls='myls'

# ┌─────────────────────────────────────────────────────────────────┐
# │ Utility Packages                                                │
# └─────────────────────────────────────────────────────────────────┘
# [Pkg]     apt install tre-command
[ -f /usr/bin/tre ] && alias tree="tre"

# [Pkg]     apt install colordiff
[ -f /usr/bin/colordiff ] && alias diff='colordiff'

# [Pkg]     apt install nmap
[ -f /usr/bin/nmap ] && alias portsopen='nmap localhost --open'

# [Pkg]     npm i -g vtop
# Directory can change w/NVM Versions so check: -x
[ -x "$(command -v vtop)" ] &>/dev/null && alias top="vtop"

# ╔═════════════════════════════════════════════════════════════════╗
# ║ Python                                                          ║
# ╚═════════════════════════════════════════════════════════════════╝
alias py='python'
alias ve='python3 -m venv ./venv'     # Creates VirtualEnv
alias va='source ./venv/bin/activate' # Activates VirtualEnv

# ╔═════════════════════════════════════════════════════════════════╗
# ║ MySQL                                                           ║
# ╚═════════════════════════════════════════════════════════════════╝
alias mysqlvars="mysql -NBe 'SHOW VARIABLES'| sed 's,\t,^=,' | column -ts^"

# ╔═════════════════════════════════════════════════════════════════╗
# ║ Fix apt Legacy Keys                                             ║
# ╚═════════════════════════════════════════════════════════════════╝
# >> Get the Repository file size
function fix-apt-legacy-keys() {
  for KEY in $(apt-key list | grep -E "(([ ]{1,2}(([0-9A-F]{4}))){10})" | tr -d " " | grep -E "([0-9A-F]){8}\b"); do
    K=${KEY:(-8)}
    apt-key export $K | sudo gpg --dearmour -o /etc/apt/trusted.gpg.d/imported-from-trusted-gpg-$K.gpg
  done
}

# ╔═════════════════════════════════════════════════════════════════╗
# ║ Git Alaias (Also see .gitconfig [alias])                        ║
# ╚═════════════════════════════════════════════════════════════════╝
# >> Get the Repository file size
function git-filesize() {
  git rev-list --objects --all |
    git cat-file --batch-check='%(objecttype) %(objectname) %(objectsize) %(rest)' |
    sed -n 's/^blob //p' |
    sort --numeric-sort --key=2 |
    cut -c 1-12,41- |
    $(command -v gnumfmt || echo numfmt) --field=2 --to=iec-i --suffix=B --padding=7 --round=nearest
}

# ╔═════════════════════════════════════════════════════════════════╗
# ║ Docker Aliases                                                  ║
# ╚═════════════════════════════════════════════════════════════════╝
alias docker-restart='sudo systemctl restart docker'
alias docker-kill='sudo systemctl kill docker'
alias docker-start='sudo systemctl start docker'
alias docker-stop='sudo systemctl stop docker'
alias docker-reload='sudo systemctl reload docker'
alias docker-status='sudo systemctl status docker'
dock-run() { sudo docker run -i -t --privileged "$@"; }
dock-exec() { sudo docker exec -i -t "$@" /bin/bash; }
dock-log() { sudo docker logs --tail=all -f "$@"; }
dock-port() { sudo docker port "$@"; }
dock-vol() { sudo docker inspect --format '{{ .Volumes }}' "$@"; }
dock-ip() { sudo docker inspect --format '{{ .NetworkSettings.IPAddress }}' "$@"; }
dock-rmc() { sudo docker rm sudo docker ps -qa --filter 'status=exited'; }
dock-rmi() { sudo docker rmi -f sudo docker images | grep '^<none>' | awk '{print $3}'; }
dock-stop() { sudo docker stop '$(docker ps -a -q)'; }
dock-rm() { sudo docker rm '$(docker ps -a -q)'; }

docker-compose-from-container() {
  docker pull ghcr.io/red5d/docker-autocompose:latest
  echo -e "\n [ START: output $([[ -z $1 ]] && echo 'single' || echo 'all') running container ]"
  docker run --rm -v /var/run/docker.sock:/var/run/docker.sock ghcr.io/red5d/docker-autocompose ${1:-$(docker ps -aq)}
  echo -e "\n [ END: output $([[ -z $1 ]] && echo 'single' || echo 'all') running containers ]"
}

# ╔═════════════════════════════════════════════════════════════════╗
# ║ Archive Aliases                                                 ║
# ╚═════════════════════════════════════════════════════════════════╝
# >> Compress contents into a <name>tar.gz
function compress() {
  if [[ -z $1 ]]; then
    echo -e "[!] You must provide a filename or folder to archive."
    echo -e "compress <name>.tar.gz <folder|file>"
    return
  fi

  # Strip off the Extension
  FILENAME=${1%.*}
  tar -cvzf "$FILENAME.tar.gz" "$1"
}

# ╔═════════════════════════════════════════════════════════════════╗
# ║ File Aliases                                                    ║
# ╚═════════════════════════════════════════════════════════════════╝
# >> Find a list of the 20 largest files
function ls-largest() {
  du -h -x -s -- * | sort -r -h | head -20
}

# >> Show the LATEST file in current directory
ls-latest() {
  local f latest
  for f in "${1:-.}"/*; do
    [[ $f -nt $latest ]] && latest="$f"
  done
  printf '%s\n' "$latest"
}

# ╔═════════════════════════════════════════════════════════════════╗
# ║ Mouse Move                                                      ║
# ╚═════════════════════════════════════════════════════════════════╝
mm() {
  LENGTH=1
  DELAY=5

  while true; do
    for ANGLE in 0 90 180 270; do
      xdotool mousemove_relative --polar $ANGLE $LENGTH
      sleep $DELAY
    done
  done
}
