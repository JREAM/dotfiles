#!/bin/bash
# shellcheck disable=SC1087

# ╔═════════════════════════════════════════════════════════════════╗
# ║  BASH VARIABLES                                                 ║
# ╠═════════════════════════════════════════════════════════════════╣
# ║ May be used in other scripts.                                   ║
# ║ Ensure this is sourced from ~/.bashrc                           ║
# ╚═════════════════════════════════════════════════════════════════╝

# Set TERM if not already set
[ -z "${TERM+x}" ] && export TERM='xterm-256color'

# ┌─────────────────────────────────────────────────────────────────┐
# │ Colors and Formatting                                           │
# └─────────────────────────────────────────────────────────────────┘

ESC="\033"
RESET="$ESC[0m"

# Function to define color variables
define_colors() {
  local mode=$1
  local prefix=$2
  local colors=("BLACK" "RED" "GREEN" "YELLOW" "BLUE" "PURPLE" "CYAN" "WHITE")
  local start=${3:-30}

  for i in "${!colors[@]}"; do
    export "${prefix}${colors[$i]}=${ESC}[$mode;$((start + i))m"
  done
}

# Define color sets
define_colors 0 ""      # Standard
define_colors 1 "B"     # Bold
define_colors 4 "U"     # Underline
define_colors 0 "I" 90  # Intense
define_colors 1 "IB" 90 # Intense Bold

# ┌─────────────────────────────────────────────────────────────────┐
# │ Utility Functions                                               │
# └─────────────────────────────────────────────────────────────────┘

__deverror() { echo -e "${IBRED}(!)${RESET} Developer Error!"; }

message() {
  local color=$1 symbol=$2 text=$3
  [ -z "$text" ] && __deverror || echo -e "${!color}${symbol}${RESET} $text"
}

success() { message "IBGREEN" "(+)" "$1"; }
info() { message "IBBLUE" "(+)" "$1"; }
warn() { message "IBYELLOW" "[!]" "$1"; }
danger() { message "IBRED" "[!]" "$1"; }

# Function to list available colors
colors() {
  for ((i = 16; i < 256; i++)); do
    printf "\e[48;5;${i}m%03d" $i
    printf '\e[0m'
    [ ! $((($i - 15) % 6)) -eq 0 ] && printf ' ' || printf '\n'
  done
}
alias list-colors='colors'

# ┌─────────────────────────────────────────────────────────────────┐
# │ Box Drawing Characters                                          │
# └─────────────────────────────────────────────────────────────────┘

# Single line
declare -A Ln=(
  [H]="─" [V]="│" [TL]="┌" [TR]="┐" [BL]="└" [BR]="┘"
  [MT]="┬" [MB]="┴" [ML]="├" [MR]="┤" [MC]="┼"
  [RdTL]="╭" [RdTR]="╮" [RdBR]="╯" [RdBL]="╰"
)

# Double line
declare -A Ln2x=(
  [H]="═" [V]="║" [TL]="╔" [TR]="╗" [BL]="╚" [BR]="╝"
  [MT]="╦" [MB]="╩" [ML]="╠" [MR]="╣" [MC]="╬"
)

# Fat line
declare -A LnF=(
  [H]="━" [V]="┃" [TL]="┏" [TR]="┓" [BL]="┗" [BR]="┛"
  [MT]="┳" [MB]="┻" [ML]="┣" [MR]="┫" [MC]="╋"
)

# Connectors and misc
declare -A LnMisc=(
  [1x2TL]="╒" [1x2TR]="╕" [1x2BL]="╘" [1x2BR]="╛" [1x2ML]="╞" [1x2MR]="╡" [1x2MT]="╥" [1x2MB]="╨" [1x2MC]="╪"
  [2x1TL]="╓" [2x1TR]="╖" [2x1BL]="╙" [2x1BR]="╜" [2x1ML]="╟" [2x1MR]="╢" [2x1MT]="╤" [2x1MB]="╧" [2x1MC]="╫"
  [DshH]="╌" [DshV]="┊" [DshFatH]="┅" [DshFatV]="┋"
)

# Export all variables

for array in Ln Ln2x LnF LnMisc; do
  declare -n arr=$array
  for key in "${!arr[@]}"; do
    export "${array}${key}=${arr[$key]}"
  done
done
